The ``2-matrix_divided`` module
===============

Using ``matrix_divided``
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided


EXPECTED OUTPUT
1.
	>>> matrix_divided([['a', 'b'], [1, 2]], 3)
	Traceback (most recent call last):
		   ...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

2.
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]


	ERROR HANDLING
3.
	>>> matrix_divided([[1, 2, 3], [4, 5]] , 3)
	Traceback (most recent call last):
		  ...
	TypeError: Each row of the matrix must have the same size

4.
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]] , 0)
	Traceback (most recent call last):
		  ...
	ZeroDivisionError: division by zero

5.
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]] , 'a')
	Traceback (most recent call last):
		  ...
	TypeError: div must be a number

6.
	>>> matrix_divided([1 , [4, 5, 6]] , 1)
	Traceback (most recent call last):
		  ...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

7.
	>>> matrix_divided( 1, 2)
	Traceback (most recent call last):
		  ...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

8.
	>>> matrix_divided([], 2)
	Traceback (most recent call last):
		  ...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

9.
	>>> matrix_divided([[],[]], 2)
	Traceback (most recent call last):
		  ...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

10.
	>>> matrix_divided([(1, 2, 3), (4, 5, 6)], 2)
	Traceback (most recent call last):
		  ...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

11.
	>>> matrix_divided((1, 2, 3), 2)
	Traceback (most recent call last):
		  ...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
